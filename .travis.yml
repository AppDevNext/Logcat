# Run android emulator on accelerated intel CPU
# or on emulated ARM CPU.
# Includes test.

#    +-----------+--------------------+--------------------+
#    | API Level |     Code Name      | Android OS version |
#    +-----------+--------------------+--------------------+
#    |        29 | 10                 |                 10 |
#    |        28 | Pie                |                  9 |
#    |        27 | Oreo               |                8.1 |
#    |        26 | Oreo               |  (dropped ARM) 8.0 |
#    |        25 | Nougat             |                7.1 |
#    |        24 | Nougat             |                7.0 |
#    |        23 | Marshmallow        |                6.0 |
#    |        22 | Lollipop           |                5.1 |
#    |        21 | Lollipop           |                5.0 |
#    |        20 | Not released       |                    |
#    |        19 | Kitkat             |                4.4 |
#    |        18 | Jellybean          |                4.3 |
#    |        17 | Jellybean          |                4.2 |
#    |        16 | Jellybean          |                4.1 |
#    |        15 | Ice Cream Sandwich |                4.0 |
#    |        14 | Not Released       |                    |
#    |        13 | Not Released       |                    |
#    |        12 | Not Released       |                    |
#    |        11 | Not Released       |                    |
#    |        10 | Gingerbread        |                2.3 |
#    +-----------+--------------------+--------------------+
# "https://en.wikipedia.org/wiki/Android_(operating_system)#Platform_information"

language: generic
dist: bionic

env:
  global:
    - ANDROID_TOOLS=4333796 # android-28
    - ANDROID_SDK_VERSION=29 # The current compileSdkVersion from build.gradle
    - ANDROID_BUILD_TOOLS_VERSION=29.0.2 # Depends on compileSdkVersion
    - ANDROID_HOME=${HOME}/android-sdk
    - GRAVIS="https://raw.githubusercontent.com/DanySK/Gravis-CI/master/"
    - JDK="1.8" # the JDK used for running tests
    - TOOLS=${ANDROID_HOME}/tools
    # PATH order is incredibly important. e.g. the 'emulator' script exists in more than one place!
    - PATH=${ANDROID_HOME}:${ANDROID_HOME}/emulator:${TOOLS}:${TOOLS}/bin:${ANDROID_HOME}/platform-tools:${PATH}
    - PATH=${HOME}/.pub-cache/bin:${PATH}
    - API=29
    - ABI=x86
    - GOO=google_apis_playstore

  # https://travis-ci:org/hannesa2/Logcat/builds/624709511 details, how the current state is
  # matrix of APIxABIxGOO
  # (see "sdkmanager --list --verbose| grep ^system-images" for full list)

branches:
  only:
    - master

before_install:
  - java -version

  # Set up KVM
  - sudo apt-get -y --no-install-recommends install bridge-utils libpulse0 libvirt-bin qemu-kvm virtinst ubuntu-vm-builder > /dev/null
  - sudo apt-get install -y libxtst6 libnss3-dev libnspr4 libxss1 libasound2 libatk-bridge2.0-0 libgtk-3-0 libgdk-pixbuf2.0-0
  # add travis user to groups
  - sudo adduser $USER libvirt
  - sudo adduser $USER kvm

  # Set up JDK 8 for Android SDK
  - curl "${GRAVIS}.install-jdk-travis.sh" --output ~/.install-jdk-travis.sh
  - export TARGET_JDK="${JDK}"
  - JDK="1.8" # used when running sdkmanager
  - source ~/.install-jdk-travis.sh

  # Set up Android SDK
  - wget -q "https://dl.google.com/android/repository/sdk-tools-linux-$ANDROID_TOOLS.zip" -O android-sdk-tools.zip
  - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
  - rm android-sdk-tools.zip

  # Avoid harmless sdkmanager warning
  - mkdir ~/.android
  - echo 'count=0' > ~/.android/repositories.cfg

  # Accept licenses before installing components, no need to echo y for each component
  - yes | sdkmanager --licenses >/dev/null

install:
  # Download SDK tools
  - sdkmanager "platform-tools" >/dev/null
  - sdkmanager "tools" >/dev/null # A second time per Travis docs, gets latest versions
  - sdkmanager "build-tools;$ANDROID_BUILD_TOOLS_VERSION" >/dev/null # Implicit gradle dependency - gradle drives changes
  - sdkmanager "platforms;android-$API" >/dev/null # We need the API of the emulator we will run
  - sdkmanager "platforms;android-$ANDROID_SDK_VERSION" >/dev/null # We need the API of the current compileSdkVersion from build.gradle

  - sdkmanager "emulator" >/dev/null
  - ${ANDROID_HOME}/emulator/emulator -version
  - |
    if [[ $ABI =~ "x86" ]]; then
      # Download a pinned version of the emulator since default version can cause issues
      emulator_version=5889189 # 29.2.11.0 (build_id 6031357) or later ==> 29.2.1.0 (build_id 5889189)
      curl -fo emulator.zip "https://dl.google.com/android/repository/emulator-linux-$emulator_version.zip"
      rm -rf "${ANDROID_HOME}/emulator"
      unzip -q emulator.zip -d "${ANDROID_HOME}"
      rm -f emulator.zip
    fi
  - |
    if [[ $ABI =~ "arm" ]]; then
      # Download a pinned version of the emulator since default version can cause issues
      emulator_version=5264690 # 29.2.1.0 (build_id 5889189) ==> 28.0.23.0 (build_id 5264690)
      # sudo apt-get install -y libunwind8 libc++1
      curl -fo emulator.zip "https://dl.google.com/android/repository/emulator-linux-$emulator_version.zip"
      rm -rf "${ANDROID_HOME}/emulator"
      unzip -q emulator.zip -d "${ANDROID_HOME}"
      rm -f emulator.zip
      # install build tools and platforms for arm (to allow emulator to run)
      sdkmanager "build-tools;25.0.2" "platforms;android-25" > /dev/null
    fi
  - ${ANDROID_HOME}/emulator/emulator -version

  - sdkmanager "extras;android;m2repository" >/dev/null
  - sdkmanager "system-images;android-$ANDROID_SDK_VERSION;default;x86" >/dev/null # install system images used in gradle.build
  - sdkmanager "system-images;android-$API;$GOO;$ABI" >/dev/null # install system images for emulator

  # Create an Android emulator
  #  - echo no | avdmanager --verbose create avd --force -n test -k "system-images;android-$API;$GOO;$ABI" -c 10M
  - echo no | avdmanager --verbose create avd --force -n test -k "system-images;android-$API;$GOO;$ABI"
  #  - EMU_PARAMS="
  #      -verbose
  #      -no-snapshot
  #      -no-window
  #      -no-audio
  #      -no-boot-anim
  #      -camera-back none
  #      -camera-front none
  #      -selinux permissive
  #      -qemu -m 2048"
  - EMU_PARAMS="
    -avd test
    -verbose
    -no-window
    -no-audio
    "
  - EMU_COMMAND="emulator"
  - |
    if [[ $ABI =~ "x86" ]]; then
      #EMU_COMMAND="emulator-headless"
      echo -n # noop
    else
      # emulate graphics if running on ARM
      EMU_PARAMS="${EMU_PARAMS} -gpu swiftshader"
    fi
  # This double "sudo" monstrosity is used to have Travis execute the
  # emulator with its new group permissions and help preserve the rule
  # of least privilege.
  - sudo -E sudo -u $USER -E bash -c "${ANDROID_HOME}/emulator/${EMU_COMMAND} ${EMU_PARAMS} &"

  # Switch back to our target JDK version to build and run tests
  - JDK="${TARGET_JDK}"
  - source ~/.install-jdk-travis.sh

before_script:
  # wait for emulator to finish startup
  - ./script/android-wait-for-emulator.sh
  # unlock screen
  - adb shell input keyevent 82 &

script:
  - ./gradlew clean lint ktlintCheck assembleDebug testDebugUnitTest
  - ./gradlew cAT

git:
  depth: false

before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
  - curl "${GRAVIS}.clean_gradle_cache.sh" --output ~/.clean_gradle_cache.sh
  - bash ~/.clean_gradle_cache.sh

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

after_failure:
  #- cat /home/travis/build/hannesa2/Logcat/sample/build/reports/androidTests/connected/index.html
  - export MY_MOD="Logcat"
  - export MY_LOG_DIR="$(pwd)/${MY_MOD}/build/reports/androidTests/connected/"
  - export MY_LOG_DIR_RESULT="$(pwd)/${MY_MOD}/build/reports/androidTest-result/connected/"
  #- sudo apt-get install -qq lynx && lynx --dump index.html > myIndex.log
  #- lynx --dump com.android.builder.testing.ConnectedDevice.html > myConnectedDevice.log
  #- lynx --dump com.android.builder.testing.html > myTesting.log
  - find $MY_LOG_DIR -name "*.html" | while read -r file ; do echo $file; echo "-------"; cat $file; done
  - find $MY_LOG_DIR -name "*.xml" | while read -r file ; do echo $file; echo "-------"; cat $file; done
  - pwd && cd "${MY_LOG_DIR:-.}"
  - pwd && ls -al
  - for file in *.html; do echo "$file"; echo "====================="; cat "$file"; done || true
  - for file in *.xml; do echo "$file"; echo "====================="; cat "$file"; done || true
#  - pwd && cd "${MY_LOG_DIR_RESULT:-.}" && pwd && ls -al
#  - for file in *.html; do echo "$file"; echo "====================="; cat "$file"; done || true
#  - for file in *.xml; do echo "$file"; echo "====================="; cat "$file"; done || true


