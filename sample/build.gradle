apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'


android {
    compileSdkVersion propCompileSdkVersion

    defaultConfig {
        versionCode 1
        versionName "1.0"

        minSdkVersion 16
        targetSdkVersion 30

        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
        }
        debug {
            defaultConfig.minSdkVersion 21
        }
    }

    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
    }

}

dependencies {
    implementation project(':LogcatCoreLib')
    implementation project(':LogcatCrashlyticLib')
    implementation project(':LogcatCountlyLib')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation 'com.github.AppDevNext:Moka:0.4'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "androidx.test:core:$coreVersion"

    androidTestImplementation "androidx.test.ext:junit:$extJUnitVersion"
    androidTestImplementation "androidx.test.ext:truth:1.3.0"
    androidTestImplementation "com.google.truth:truth:1.1"
}

def adbDirectory = '/storage/emulated/0/Download'
def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.mustRunAfter {
            clearScreenshotsTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}
